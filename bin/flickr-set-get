#!/usr/bin/env node

'use strict';

/**
 * Dependencies
 */
var program = require('commander');
var prompt = require('prompt');
var cli = require('cli');
var fs = require('fs');
var ConfigManager = require('../lib/ConfigManager');
var Flickr = require('../lib/Flickr');
var pkg = require('../package');

// Solves occasional UNABLE_TO_VERIFY_LEAF_SIGNATURE error
process.env['NODE_TLS_REJECT_UNAUTHORIZED'] = '0';

// Fixes weird error for using the "arguments" keyword on some IDEs
program.args = program['arguments'];

var defaultConfigPath = (process.env.HOME || process.env.USERPROFILE) + '/.flickr-set-getrc';

/**
 * Command line program commands definition
 */
program
  .version(pkg.version)
;

/**
 * Configure command
 */
program
  .command('configure')
  .alias('config')
  .description('configure apiKey and authentication')
  .option('--file <value>', 'Define the config file to use', null, defaultConfigPath)
  .option('--noAuthentication', 'will not configure authentication (only API Key)', null, true)
  .action(function action(options) {
    config(options.file || defaultConfigPath, !options.noAuthentication);
  })
;

/**
 * Get command
 */
program
  .command('get <setId> <userId>')
  .alias('g')
  .description('download a set of photos')
  .option('--apiKey <value>', 'The flickr API key', null, null)
  .option('--authToken <value>', 'The flickr auth token', null, null)
  .option('--authenticated', 'Use authenticate request to access private photos (ensure to provide a valid ' +
                             '`authToken` as option or in your config file)', null, false)
  .option('--config <value>', 'Define the config file to use', null, defaultConfigPath)
  .option('-c, --concurrency <n>', 'The number of concurrent requests', parseInt, null)
  .option('-o, --outputDir <s>', 'The directory where to save the downloaded images', null, null)
  .option('-s, --size <s>', 'The size of the image to download (eg. "Original", "Large", "Medium", etc.)', null, null)
  .option('-n, --noOverwrite', 'If set does not overwrite existing files', null, null)
  .action(function action(setId, userId, options) {
    getSet(setId, userId, options);
  })
;

/**
 * Catch invalid commands and show help message
 * (if the command is `help` it is not considered an invalid command)
 */
program
  .command('*')
  .description('')
  .action(function(command){
    if(command !== 'help') {
      cli.error('Invalid command "' + command + '"');
    }
    program.outputHelp();
    process.exit(command === 'help' ? 0 : 1)
  })
;

/**
 * Downloads a flickr set
 * @param {string} setId
 * @param {string} userId
 * @param {object} commandOptions
 */
function getSet(setId, userId, commandOptions) {

  if( !setId || !userId) {
    console.error('You need to pass the flickr "setId" and the "userId" as arguments');
    process.exit(1);
  }

  var options = {};
  if (commandOptions.concurrency) options.concurrency = commandOptions.concurrency;
  if (commandOptions.outputDir) options.outputDir = commandOptions.outputDir;
  if (commandOptions.size) options.size = commandOptions.size;
  if (commandOptions.noOverwrite) options.noOverwrite = commandOptions.noOverwrite;

  var configFile = commandOptions.config || defaultConfigPath;
  var configManager = new ConfigManager(configFile);

  var apiKey = commandOptions.apiKey || configManager.options.apiKey;

  if (commandOptions.authenticated) {
    if (!configManager.options.secret || !configManager.options.authToken) {
      cli.error('Invalid configuration to make authenticated requests. You need to create a valid config file with' +
        ' the command `flickr-set-get config`');
      process.exit(1);
    }

    options.auth = {
      secret : configManager.options.secret,
      authToken : configManager.options.authToken
    }
  }

  var api = new Flickr(apiKey, options);

  var numPhotos = null;
  var numProcessed = 0;
  var numDownloaded = 0;
  var numSkipped = 0;
  var numWarnings = 0;

  api.on('setInfo', function onSetInfo(info) {
    cli.info('Downloading ' + info.total + ' photos from "' + info.title + '" by ' + info.ownername);
    numPhotos = info.total;
    cli.progress(0);
  });

  api.on('photoDownloaded', function onPhotoDownloaded() {
    numProcessed++;
    numDownloaded++;
    cli.progress(numProcessed / numPhotos);
  });

  api.on('photoSkipped', function onPhotoSkipped() {
    numProcessed++;
    numSkipped++;
    cli.progress(numProcessed / numPhotos);
  });

  api.on('done', function onDone(results) {
    cli.ok('All done. ' + numDownloaded + ' photos downloaded, ' + numSkipped + ' skipped, ' + numWarnings + ' warnings');
  });

  api.on('warning', function onWarning(error) {
    numWarnings++;
    cli.error(error);
  });
  api.on('error', function onError(error) {
    cli.error(error);
    process.exit(1);
  });

  api.downloadSet(setId, userId);
}

/**
 * Guided configuration
 * @param {string} configFile the file where to store the config
 * @param {bool} authenticate a flag that indicates whether to authenticate the user or not
 */
function config(configFile, authenticate) {

  console.log('\nThis procedure will guide you through the configuration of the flickr-set-get command line app.\n' +
          'It will suggest to use the default app configuration parameters, but it\'s highly recommended to ' +
          'generate a new app on the Flickr app garden especially if you want ' +
          'to use authenticated requests.\nThe usage of the default apiKey and secret will result in an insecure data' +
          ' transmission and can eventually lead to data theft!' +
          '\n\nTo get a new apiKey visit https://www.flickr.com/services/apps/create/apply/\n\n');

  var configManager = new ConfigManager(configFile);
  var schema = {
    properties: {
      apiKey: {
        type: 'string',
        required: true,
        pattern: /^[0-9a-f]{32}$/,
        default: configManager.options.apiKey
      },
      secret: {
        type: 'string',
        required: true,
        pattern: /^[0-9a-f]+$/,
        default: configManager.options.secret
      },
      authUrl: {
        type: 'string',
        required: true,
        pattern: /^https:\/\/www.flickr.com\/auth-([0-9]+)$/,
        default: configManager.options.authUrl
      }
    }
  };

  prompt.start();
  prompt.get(schema, function onPrompt(error, result) {
    if (error) {
      cli.error(error);
      process.exit(1)
    }

    configManager.options.apiKey = result.apiKey;
    configManager.options.secret = result.secret;
    configManager.options.authUrl = result.authUrl;

    if (authenticate) {
      console.log('\nNow you need to visit ' + result.authUrl + ' and, login to Flickr and get your ' +
                  '9 digits authorization code.\n');

      var miniTokenSchema = {
        properties: {
          miniToken: {
            type: 'string',
            required: true,
            pattern: /^\d{3}\-\d{3}\-\d{3}$/
          }
        }
      };

      prompt.get(miniTokenSchema, function onPrompt(error, result) {
        if (error) {
          cli.error(error);
          process.exit(1)
        }

        var flickr = new Flickr(configManager.options.apiKey, {
          auth : {
            secret : configManager.options.secret,
            miniToken : result.miniToken
          }
        });

        flickr.getAuthToken(function(error, data){

          if (error) {
            cli.error(error);
            process.exit(1)
          }

          configManager.options.authToken = data.auth.token._content;
          configManager.save();

          console.log('\n\nSuccessfully authenticated as ' + data.auth.user.username + ' (' + data.auth.user.nsid + ')');

        });

      });

    } else {
      configManager.save();
    }
  });

}

program.parse(process.argv);
